# install package for support vector machine
# install.packages("e1071")
library (e1071)
# install package for confusionMatrix
install.packages("caret")
library(caret)
# set working directory
setwd("C:/Rdata")
# read data
iris<-read.csv("iris.csv")
attach(iris)
# training (100) & test set (50)
set.seed(1000)
N=nrow(iris)
tr.idx=sample(1:N, size=N*2/3, replace=FALSE)
# target variable
y=iris[,5]
# split train data and test data
train=iris[tr.idx,]
test=iris[-tr.idx,]
#svm using kernel
help("svm")
m1<-svm(Species~., data = train)
summary(m1)
m2<-svm(Species~., data = train,kernel="polynomial")
summary(m2)
m3<-svm(Species~., data = train,kernel="sigmoid")
summary(m3)
m4<-svm(Species~., data = train,kernel="linear")
summary(m4)
summary(m1)
#measure accuracy
pred11<-predict(m1,test) # radial basis
confusionMatrix(pred11, test$Species)
pred12<-predict(m2,test) # polynomial
confusionMatrix(pred12, test$Species)
confusionMatrix(pred11, test$Species)
confusionMatrix(pred12, test$Species)
pred13<-predict(m3,test) # simoid
confusionMatrix(pred13, test$Species)
pred14<-predict(m4,test) # linear
confusionMatrix(pred14, test$Species)
CrossTable(test$Species, pred14)
# install package for support vector machine
# install.packages("e1071")
library (e1071)
library(caret)
CrossTable(test$Species, pred14)
crossTable(test$Species, pred14)
CrossTable(test$Species, pred14)
confusionMatrix(pred11, test$Species)
confusionMatrix(pred12, test$Species)
confusionMatrix(pred13, test$Species)
confusionMatrix(pred14, test$Species)
# install.packages("e1071")
# load package for support vector machine
library(e1071) #svm model
# install.packages("caret")
# load package for Confusion matrix
library(caret)
# set working directory
setwd("C:/Rdata")
# read data
cancer<-read.csv("cancer.csv")
# set working directory
setwd("C:/Rdata")
# read data
cancer<-read.csv("cancer.csv")
head(cancer, n=10)
# remover X1 column(ID number)
cancer<-cancer[, names(cancer) != "X1"]
attach(cancer)
# training (455) & test set (228)
# set.seed(1000)
N=nrow(cancer)
set.seed(998)
#svm using kernel
m1<-svm(Y~., data = train)
summary(m1)
m2<-svm(Y~., data = train,kernel="polynomial")
summary(m2)
m3<-svm(Y~., data = train,kernel="sigmoid")
summary(m3)
m4<-svm(Y~., data = train,kernel="linear")
summary(m4)
# split train data and test data
tr.idx=sample(1:N, size=N*2/3, replace=FALSE)
train <- cancer[ tr.idx,]
test  <- cancer[-tr.idx,]
#svm using kernel
m1<-svm(Y~., data = train)
summary(m1)
m2<-svm(Y~., data = train,kernel="polynomial")
summary(m2)
m3<-svm(Y~., data = train,kernel="sigmoid")
summary(m3)
m4<-svm(Y~., data = train,kernel="linear")
summary(m4)
#measure accuracy
pred11<-predict(m1,test) # radial basis
confusionMatrix(pred11, test$Y)
pred12<-predict(m2,test) # polynomial
confusionMatrix(pred12, test$Y)
pred13<-predict(m3,test) # sigmoid
confusionMatrix(pred13, test$Y)
pred14<-predict(m4,test) # linear
confusionMatrix(pred14, test$Y)
library(gmodels)
CrossTable(pred14, test$Y)
confusionMatrix(pred11, test$Y)
confusionMatrix(pred12, test$Y)
confusionMatrix(pred13, test$Y)
confusionMatrix(pred13, test$Y)
confusionMatrix(pred14, test$Y)
CrossTable(pred14, test$Y)
confusionMatrix(pred11, test$Y)
confusionMatrix(pred12, test$Y)
confusionMatrix(pred13, test$Y)
confusionMatrix(pred14, test$Y)
confusionMatrix(pred11, test$Y)
confusionMatrix(pred14, test$Y)
confusionMatrix(pred11, test$
Y)
confusionMatrix(pred11, test$Y)
#decision tree packages download
install.packages("tree")
#load library
library(tree)
#package for confusion matrix
#install.packages("caret")
library(caret)
# set working directory
setwd("C:/Rdata")
attach(iris)
# training (n=100)/ test data(n=50)
set.seed(1000)
N<-nrow(iris)
tr.idx<-sample(1:N, size=N*2/3, replace=FALSE)
# split train data and test data
train<-iris[tr.idx,]
test<-iris[-tr.idx,]
# set working directory
setwd("C:/Rdata")
# read csv file
iris<-read.csv("iris.csv")
attach(iris)
# training (n=100)/ test data(n=50)
set.seed(1000)
N<-nrow(iris)
tr.idx<-sample(1:N, size=N*2/3, replace=FALSE)
# split train data and test data
train<-iris[tr.idx,]
test<-iris[-tr.idx,]
help("tree")
# step1 : growing tree
treemod<-tree(Species~., data=train)
treemod
plot(treemod)
text(treemod,cex=1.5)
# step2 : pruning using cross-validation
cv.trees<-cv.tree(treemod, FUN=prune.misclass)
cv.trees
plot(cv.trees)
help(cv.tree)
help(prune.misclass)
# final tree model with the optimal node
prune.trees<-prune.misclass(treemod, best=3)
plot(prune.trees)
text(prune.trees,pretty=0, cex=1.5)
# step 3: classify test data
treepred<-predict(prune.trees,test,type='class')
# classification accuracy
confusionMatrix(treepred,test$Species)
# other package for tree
install.packages("rpart")
install.packages("rpart")
install.packages("party")
library(rpart)
library(party)
# set working directory
setwd("C:/Rdata")
# read csv file
iris<-read.csv("iris.csv")
attach(iris)
# training (n=100)/ test data(n=50)
set.seed(1000)
N<-nrow(iris)
tr.idx<-sample(1:N, size=N*2/3, replace=FALSE)
# split train data and test data
train<-iris[tr.idx,]
test<-iris[-tr.idx,]
#decision tree : use rpart package
help("rpart")
cl1<-rpart(Species~., data=train)
plot(cl1)
text(cl1, cex=1.5)
cl1<-rpart(Species~., data=train)
plot(cl1)
text(cl1, cex=1)
#pruning (cross-validation)-rpart
printcp(cl1)
plotcp(cl1)
pcl1<-prune(cl1, cp=cl1$cptable[which.min(cl1$cptable[,"xerror"]),"CP"])
plot(pcl1)
text(pcl1)
pcl1<-prune(cl1, cp=cl1$cptable[which.min(cl1$cptable[,"xerror"]),"CP"])
help(printcp)
#measure accuracy(rpart)
pred2<- predict(cl1,test, type='class')
confusionMatrix(pred2,test$Species)
#package for confusion matrix
#install.packages("caret")
library(caret)
#measure accuracy(rpart)
pred2<- predict(cl1,test, type='class')
confusionMatrix(pred2,test$Species)
#decision tree(party)-unbiased recursive partioning based on permutation test
partymod<-ctree(Species~.,data=train)
plot(partymod)
#measuring accuracy(party)
partypred<-predict(partymod,test)
confusionMatrix(partypred,test$Species)
partymod
help(criterion)
#measuring accuracy(party)
partypred<-predict(partymod,test)
confusionMatrix(partypred,test$Species)
# random forest package
install.packages("randomForest")
library(randomForest)
# load caret package for confusion matrix
library(caret)
# set working directory
setwd("C:/Rdata")
# read csv file
iris<-read.csv("iris.csv")
attach(iris)
# training/ test data : n = 150
set.seed(1000)
N<-nrow(iris)
tr.idx<-sample(1:N, size=N*2/3, replace=FALSE)
# split training and test data
train<-iris[tr.idx,]
test<-iris[-tr.idx,]
help(randomForest)
#Random Forest : mtry=2 (default=sqrt(p))
rf_out1<-randomForest(Species~.,data=train,importance=T)
rf_out1
#Random Forest : mtry=4
rf_out2<-randomForest(Species~.,data=train,importance=T, mtry=4)
rf_out2
# important variables for RF
round(importance(rf_out2), 2)
# important variables for RF
round(importance(rf_out2), 2)
# graph
randomForest::importance(rf_out2)
varImpPlot(rf_out2)
varImpPlot(rf_out2)
#measuring accuracy(rf)
rfpred<-predict(rf_out2,test)
confusionMatrix(rfpred,test$Species)
